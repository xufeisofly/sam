[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DataType",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "DataType",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "ORIGIN_DATA_DIR",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "DataType",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "DataType",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "CHECKPOINT_DIR",
        "importPath": "util.constant",
        "description": "util.constant",
        "isExtraImport": true,
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "__future__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__future__",
        "description": "__future__",
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "BoxItem",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResult",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResult",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResultItem",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "BoxItem",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResult",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResultItem",
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "isExtraImport": true,
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BasePreprocessService",
        "importPath": "services.base_preprocess_service",
        "description": "services.base_preprocess_service",
        "isExtraImport": true,
        "detail": "services.base_preprocess_service",
        "documentation": {}
    },
    {
        "label": "PreprocessFactory",
        "importPath": "services.base_preprocess_service",
        "description": "services.base_preprocess_service",
        "isExtraImport": true,
        "detail": "services.base_preprocess_service",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ProcessResult",
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "isExtraImport": true,
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "ProcessResultItem",
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "isExtraImport": true,
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "Mask",
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "isExtraImport": true,
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "ProcessResultItem",
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "isExtraImport": true,
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "ProcessResult",
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "isExtraImport": true,
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "sam_model_registry",
        "importPath": "segment_anything",
        "description": "segment_anything",
        "isExtraImport": true,
        "detail": "segment_anything",
        "documentation": {}
    },
    {
        "label": "SamPredictor",
        "importPath": "segment_anything",
        "description": "segment_anything",
        "isExtraImport": true,
        "detail": "segment_anything",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "SamProcessService",
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "isExtraImport": true,
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "OutputService",
        "importPath": "services.output_service",
        "description": "services.output_service",
        "isExtraImport": true,
        "detail": "services.output_service",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "BoxItem",
        "kind": 6,
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "peekOfCode": "class BoxItem():\n    def __init__(self, ori_label: str, box_array: np.array) -> None:\n        self._ori_label = ori_label\n        self._box_array = box_array\n        self._id = None\n    @property\n    def ori_label(self):\n        return self._ori_label\n    @property\n    def box_array(self):",
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResultItem",
        "kind": 6,
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "peekOfCode": "class PreprocessResultItem():\n    def __init__(self, img_file_path: str, box_items: List[BoxItem] = None, data_type: DataType=DataType.TRAIN) -> None:\n        self._img_file_path = img_file_path\n        self._box_items = box_items if box_items is not None else []\n        self._data_type = data_type\n    def append(self, item: BoxItem):\n        self._box_items.append(item)\n    @property\n    def img_file_path(self):\n        return self._img_file_path",
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "PreprocessResult",
        "kind": 6,
        "importPath": "schemas.preprocess_result",
        "description": "schemas.preprocess_result",
        "peekOfCode": "class PreprocessResult():\n    def __init__(self, result_list: List[PreprocessResultItem] = None) -> None:\n        self._result_list = result_list if result_list is not None else []\n    def append(self, item: PreprocessResultItem):\n        self._result_list.append(item)\n    @property\n    def result_list(self):\n        return self._result_list\n    @property\n    def ori_labels(self):",
        "detail": "schemas.preprocess_result",
        "documentation": {}
    },
    {
        "label": "Mask",
        "kind": 6,
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "peekOfCode": "class Mask():\n    def __init__(self, img_file_path: str, data: np.ndarray, id: int, box_items: List[BoxItem]=None) -> None:\n        \"\"\"\n        data: np.array([], dtype=np.boolean)\n        \"\"\"\n        if data.ndim != 2:\n            raise ValueError(\"data must be a 2D numpy array\")\n        if id <= 0:\n            raise ValueError(\"id must be greater than zero\")\n        self._data = data.astype(int) * id",
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "ProcessResultItem",
        "kind": 6,
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "peekOfCode": "class ProcessResultItem():\n    def __init__(self, img_file_path: str, mask: Mask, data_type=DataType.TRAIN):\n        self._img_file_path = img_file_path\n        self._mask = mask\n        self._data_type = data_type # 原始数据类型 train, validation, test\n    @property\n    def file_name_without_ext(self) -> str:\n        return self._img_file_path.split(\"/\")[-1].split(\".\")[0]\n    @property\n    def img_file_path(self) -> str:",
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "ProcessResult",
        "kind": 6,
        "importPath": "schemas.process_result",
        "description": "schemas.process_result",
        "peekOfCode": "class ProcessResult():\n    def __init__(self, result_list: List[ProcessResultItem] = None):\n        self._result_list = result_list if result_list is not None else []\n        self._id_count_map = {}\n        for item in self._result_list:\n            for k, v in item.get_id_count_map().items():\n                if k in self._id_count_map:\n                    self._id_count_map[k] += v\n                else:\n                    self._id_count_map[k] = v",
        "detail": "schemas.process_result",
        "documentation": {}
    },
    {
        "label": "BasePreprocessService",
        "kind": 6,
        "importPath": "services.base_preprocess_service",
        "description": "services.base_preprocess_service",
        "peekOfCode": "class BasePreprocessService(ABC):\n    @abstractmethod\n    def call(self) -> PreprocessResult:\n        pass\n    @abstractmethod\n    def ori_label_2_id_map(self, label: str) -> dict:\n        pass\nclass PreprocessFactory():\n    def create(self, service_name: str) -> BasePreprocessService:\n        if service_name == \"MAR20\":",
        "detail": "services.base_preprocess_service",
        "documentation": {}
    },
    {
        "label": "PreprocessFactory",
        "kind": 6,
        "importPath": "services.base_preprocess_service",
        "description": "services.base_preprocess_service",
        "peekOfCode": "class PreprocessFactory():\n    def create(self, service_name: str) -> BasePreprocessService:\n        if service_name == \"MAR20\":\n            from services.mars20_preprocess_service import Mars20PreprocessService\n        else:\n            raise ValueError(\"Invalid service name\")\n        return Mars20PreprocessService()",
        "detail": "services.base_preprocess_service",
        "documentation": {}
    },
    {
        "label": "Mars20PreprocessService",
        "kind": 6,
        "importPath": "services.mars20_preprocess_service",
        "description": "services.mars20_preprocess_service",
        "peekOfCode": "class Mars20PreprocessService(BasePreprocessService):\n    def __init__(self) -> None:\n        self._dataset_path = os.path.join(ORIGIN_DATA_DIR, \"MARS20\")\n    def call(self) -> PreprocessResult:\n        anno_folder = os.path.join(self._dataset_path, \"Annotations/Horizontal Bounding Boxes\")\n        all_xml_files = os.listdir(anno_folder)\n        all_xml_files = [f for f in all_xml_files if f.endswith('.xml')]\n        result = PreprocessResult([])\n        for xml_file in all_xml_files:\n            tree = etree.parse(os.path.join(anno_folder, xml_file))",
        "detail": "services.mars20_preprocess_service",
        "documentation": {}
    },
    {
        "label": "OutputService",
        "kind": 6,
        "importPath": "services.output_service",
        "description": "services.output_service",
        "peekOfCode": "class OutputService():\n    def __init__(self, dataset_name: str='default'):\n        self._dataset_name = dataset_name\n        self._output_dir = os.path.join(OUTPUT_DIR, self._dataset_name)\n        self._output_ann_dir = os.path.join(self._output_dir, \"ann_dir\")\n        self._output_img_dir = os.path.join(self._output_dir, \"img_dir\")\n        self._train_ann_dir = os.path.join(self._output_ann_dir, \"train\")\n        self._val_ann_dir = os.path.join(self._output_ann_dir, \"val\")\n        self._train_img_dir = os.path.join(self._output_img_dir, \"train\")\n        self._val_img_dir = os.path.join(self._output_img_dir, \"val\")",
        "detail": "services.output_service",
        "documentation": {}
    },
    {
        "label": "SamProcessService",
        "kind": 6,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "class SamProcessService():\n    def __init__(self, ori_label_2_id_map: dict) -> None:\n        self._ori_label_2_id_map = ori_label_2_id_map\n    def call(self, data: PreprocessResult, use_gpu: False, parallel_num=1) -> ProcessResult:\n        # result = ProcessResult()\n        # for item in data.result_list:\n        #     result_item = self.call_one(item)\n        #     result.append(result_item)\n        # return result\n        result = ProcessResult()",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "show_mask",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def show_mask(mask, ax, random_color=False):\n    if random_color:\n        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)\n    else:\n        color = np.array([30/255, 144/255, 255/255, 0.6])\n    h, w = mask.shape[-2:]\n    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)\n    ax.imshow(mask_image)\ndef show_points(coords, labels, ax, marker_size=375):\n    pos_points = coords[labels==1]",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "show_points",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def show_points(coords, labels, ax, marker_size=375):\n    pos_points = coords[labels==1]\n    neg_points = coords[labels==0]\n    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)\n    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)   \ndef show_box(box, ax):\n    x0, y0 = box[0], box[1]\n    w, h = box[2] - box[0], box[3] - box[1]\n    ax.add_patch(plt.Rectangle((x0, y0), w, h, edgecolor='green', facecolor=(0,0,0,0), lw=2))  \ndef show_image_with_masks(image, masks, scores):",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "show_box",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def show_box(box, ax):\n    x0, y0 = box[0], box[1]\n    w, h = box[2] - box[0], box[3] - box[1]\n    ax.add_patch(plt.Rectangle((x0, y0), w, h, edgecolor='green', facecolor=(0,0,0,0), lw=2))  \ndef show_image_with_masks(image, masks, scores):\n    for i, (mask, score) in enumerate(zip(masks, scores)):\n        plt.figure(figsize=figsize(image), dpi=100)\n        plt.imshow(image)\n        show_mask(mask, plt.gca())\n        plt.title(f\"Mask {i+1}, Score: {score:.3f}\", fontsize=18)",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "show_image_with_masks",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def show_image_with_masks(image, masks, scores):\n    for i, (mask, score) in enumerate(zip(masks, scores)):\n        plt.figure(figsize=figsize(image), dpi=100)\n        plt.imshow(image)\n        show_mask(mask, plt.gca())\n        plt.title(f\"Mask {i+1}, Score: {score:.3f}\", fontsize=18)\n        plt.axis('off')\n        plt.show()      \ndef process_points_prompt(predictor: SamPredictor, points: np.array, labels: np.array):\n    masks, _, _ = predictor.predict(",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "process_points_prompt",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def process_points_prompt(predictor: SamPredictor, points: np.array, labels: np.array):\n    masks, _, _ = predictor.predict(\n        point_coords=points,\n        point_labels=labels,\n        multimask_output=False,\n    )\n    plt.figure(figsize=(10, 10))\n    plt.imshow(image)\n    show_mask(masks[0], plt.gca())\n    show_points(points, labels, plt.gca())",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "process_box_prompt",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def process_box_prompt(predictor: SamPredictor, input_box: np.array):\n    masks, scores, _ = predictor.predict(\n        point_coords=None,\n        point_labels=None,\n        box=input_box[None, :],\n        multimask_output=False,\n    )\n    return masks, scores\ndef figsize(image, dpi=100):\n    height, width, _ = image.shape",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "figsize",
        "kind": 2,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "def figsize(image, dpi=100):\n    height, width, _ = image.shape\n    figsize = width / dpi, height / dpi\n    return figsize\nimage_path1 = 'images/truck.jpg'\nimage_path2 = '../MARS20/JPEGImages/JPEGImages/1.jpg'\nif __name__ == '__main__':\n    image = cv2.imread(image_path2)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    sam_checkpoint = \"../checkpoints/sam_vit_h_4b8939.pth\"",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "image_path1",
        "kind": 5,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "image_path1 = 'images/truck.jpg'\nimage_path2 = '../MARS20/JPEGImages/JPEGImages/1.jpg'\nif __name__ == '__main__':\n    image = cv2.imread(image_path2)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    sam_checkpoint = \"../checkpoints/sam_vit_h_4b8939.pth\"\n    model_type = \"vit_h\"\n    sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)\n    #sam.to(device=\"cuda\")\n    predictor = SamPredictor(sam)",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "image_path2",
        "kind": 5,
        "importPath": "services.sam_process_service",
        "description": "services.sam_process_service",
        "peekOfCode": "image_path2 = '../MARS20/JPEGImages/JPEGImages/1.jpg'\nif __name__ == '__main__':\n    image = cv2.imread(image_path2)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    sam_checkpoint = \"../checkpoints/sam_vit_h_4b8939.pth\"\n    model_type = \"vit_h\"\n    sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)\n    #sam.to(device=\"cuda\")\n    predictor = SamPredictor(sam)\n    # slow",
        "detail": "services.sam_process_service",
        "documentation": {}
    },
    {
        "label": "DataType",
        "kind": 6,
        "importPath": "util.constant",
        "description": "util.constant",
        "peekOfCode": "class DataType(Enum):\n    TRAIN = 'train'\n    VAL = 'val'\n    TEST = 'test'",
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "util.constant",
        "description": "util.constant",
        "peekOfCode": "ROOT_DIR = '/Users/sofly/projects/dataprocess/sam'\nORIGIN_DATA_DIR = os.path.join(ROOT_DIR, 'origin_data')\nCHECKPOINT_DIR = os.path.join(ROOT_DIR, 'checkpoints')\nOUTPUT_DIR = os.path.join(ROOT_DIR, 'output')\nclass DataType(Enum):\n    TRAIN = 'train'\n    VAL = 'val'\n    TEST = 'test'",
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "ORIGIN_DATA_DIR",
        "kind": 5,
        "importPath": "util.constant",
        "description": "util.constant",
        "peekOfCode": "ORIGIN_DATA_DIR = os.path.join(ROOT_DIR, 'origin_data')\nCHECKPOINT_DIR = os.path.join(ROOT_DIR, 'checkpoints')\nOUTPUT_DIR = os.path.join(ROOT_DIR, 'output')\nclass DataType(Enum):\n    TRAIN = 'train'\n    VAL = 'val'\n    TEST = 'test'",
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "CHECKPOINT_DIR",
        "kind": 5,
        "importPath": "util.constant",
        "description": "util.constant",
        "peekOfCode": "CHECKPOINT_DIR = os.path.join(ROOT_DIR, 'checkpoints')\nOUTPUT_DIR = os.path.join(ROOT_DIR, 'output')\nclass DataType(Enum):\n    TRAIN = 'train'\n    VAL = 'val'\n    TEST = 'test'",
        "detail": "util.constant",
        "documentation": {}
    },
    {
        "label": "OUTPUT_DIR",
        "kind": 5,
        "importPath": "util.constant",
        "description": "util.constant",
        "peekOfCode": "OUTPUT_DIR = os.path.join(ROOT_DIR, 'output')\nclass DataType(Enum):\n    TRAIN = 'train'\n    VAL = 'val'\n    TEST = 'test'",
        "detail": "util.constant",
        "documentation": {}
    }
]